任务管理平台接口测试用例文档
=========================

1. 用户注册接口
-------------
URL: POST http://localhost:3000/api/user/register
Content-Type: application/json

测试用例 1.1: 正常注册
请求体：
{
    "username": "testuser",
    "password": "123456",
    "nickname": "测试用户"
}
预期响应 (201):
{
    "message": "注册成功",
    "user": {
        "id": 1,
        "username": "testuser",
        "nickname": "测试用户"
    }
}

测试用例 1.2: 用户名已存在
请求体：
{
    "username": "testuser",
    "password": "123456",
    "nickname": "测试用户2"
}
预期响应 (400):
{
    "message": "用户名已存在"
}

测试用例 1.3: 缺少必填字段
请求体：
{
    "username": "testuser",
    "password": "123456"
}
预期响应 (500):
{
    "message": "服务器错误",
    "error": "nickname cannot be null"
}

2. 用户登录接口
-------------
URL: POST http://localhost:3000/api/user/login
Content-Type: application/json

测试用例 2.1: 正常登录
请求体：
{
    "username": "testuser",
    "password": "123456"
}
预期响应 (200):
{
    "message": "登录成功",
    "token": "eyJhbGciOiJIUzI1NiIs...",
    "user": {
        "id": 1,
        "username": "testuser",
        "nickname": "测试用户"
    }
}

测试用例 2.2: 密码错误
请求体：
{
    "username": "testuser",
    "password": "wrong_password"
}
预期响应 (401):
{
    "message": "用户名或密码错误"
}

测试用例 2.3: 用户不存在
请求体：
{
    "username": "nonexistent",
    "password": "123456"
}
预期响应 (401):
{
    "message": "用户名或密码错误"
}

3. 获取用户信息接口
----------------
URL: GET http://localhost:3000/api/user/profile
Headers: 
- Content-Type: application/json
- Authorization: Bearer <token>

测试用例 3.1: 正常获取
Headers:
Authorization: Bearer eyJhbGciOiJIUzI1NiIs...
预期响应 (200):
{
    "id": 1,
    "username": "testuser",
    "nickname": "测试用户"
}

测试用例 3.2: 无效token
Headers:
Authorization: Bearer invalid_token
预期响应 (401):
{
    "message": "认证失败"
}

测试用例 3.3: 未提供token
预期响应 (401):
{
    "message": "请先登录"
}

4. 创建任务接口
-------------
URL: POST http://localhost:3000/api/tasks
Headers:
- Authorization: Bearer <token>
Content-Type: multipart/form-data

文件上传限制：
- 图片文件：最大 1MB
- 视频文件：最大 5MB
- 每个任务只能上传一个文件（图片或视频）
- 仅支持图片和视频格式

测试用例 4.1: 创建带文件的任务
请求体：
- content: "测试任务内容"
- numbers: ["13812345678", "+44 7911 123456"]
- file: 图片.jpg

预期响应 (201):
{
    "message": "任务创建成功",
    "task": {
        "id": 1,
        "user_id": 1,
        "content": "测试任务内容",
        "numbers": ["13812345678", "+44 7911 123456"],
        "media_urls": [
            "https://task-save.oss-cn-beijing.aliyuncs.com/uploads/1234567890.jpg"
        ],
        "media_type": "image",
        "status": "待处理",
        "created_at": "2024-03-20T10:00:00.000Z",
        "updated_at": "2024-03-20T10:00:00.000Z"
    }
}

测试用例 4.2: 文件大小超出限制
请求体：
- content: "测试任务内容"
- numbers: ["13812345678"]
- files: [大于1MB的图片.jpg]

预期响应 (400):
{
    "message": "文件大小超出限制",
    "error": "图片大小不能超过1MB"
}

测试用例 4.3: 不支持的文件类型
请求体：
- content: "测试任务内容"
- numbers: ["13812345678"]
- files: [文档.pdf]

预期响应 (400):
{
    "message": "文件上传失败",
    "error": "不支持的文件类型"
}

测试用例 4.4: 仅上传图片
请求体：
- content: "测试任务内容"
- numbers: ["13812345678"]
- files: [图片1.jpg, 图片2.png]

预期响应 (201):
{
    "message": "任务创建成功",
    "task": {
        "id": 2,
        "user_id": 1,
        "content": "测试任务内容",
        "numbers": ["13812345678"],
        "media_urls": [
            "https://task-save.oss-cn-beijing.aliyuncs.com/uploads/1234567892.jpg",
            "https://task-save.oss-cn-beijing.aliyuncs.com/uploads/1234567893.png"
        ],
        "media_type": "image",
        "status": "待处理",
        "created_at": "2024-03-20T10:00:00.000Z",
        "updated_at": "2024-03-20T10:00:00.000Z"
    }
}

测试用例 4.5: 仅上传视频
请求体：
- content: "测试任务内容"
- numbers: ["13812345678"]
- files: [视频.mp4]

预期响应 (201):
{
    "message": "任务创建成功",
    "task": {
        "id": 3,
        "user_id": 1,
        "content": "测试任务内容",
        "numbers": ["13812345678"],
        "media_urls": [
            "https://task-save.oss-cn-beijing.aliyuncs.com/uploads/1234567894.mp4"
        ],
        "media_type": "video",
        "status": "待处理",
        "created_at": "2024-03-20T10:00:00.000Z",
        "updated_at": "2024-03-20T10:00:00.000Z"
    }
}

测试用例 4.6: 未授权访问
Headers: 无 Authorization
预期响应 (401):
{
    "message": "请先登录"
}

5. 获取任务列表接口
----------------
URL: GET http://localhost:3000/api/tasks
Headers:
- Content-Type: application/json
- Authorization: Bearer <token>

测试用例 5.1: 正常获取
Headers:
Authorization: Bearer eyJhbGciOiJIUzI1NiIs...
预期响应 (200):
[
    {
        "id": 1,
        "user_id": 1,
        "content": "测试任务内容",
        "numbers": ["13812345678", "+44 7911 123456"],
        "media_urls": [
            "https://task-save.oss-cn-beijing.aliyuncs.com/uploads/1234567890.jpg",
            "https://task-save.oss-cn-beijing.aliyuncs.com/uploads/1234567891.mp4"
        ],
        "media_type": "image",
        "status": "待处理",
        "created_at": "2024-03-20T10:00:00.000Z",
        "updated_at": "2024-03-20T10:00:00.000Z"
    }
]

测试用例 5.2: 无任务数据
Headers:
Authorization: Bearer eyJhbGciOiJIUzI1NiIs...
预期响应 (200):
[]

测试用例 5.3: 未授权访问
Headers: 无 Authorization
预期响应 (401):
{
    "message": "请先登录"
}

6. 获取统计数据接口
----------------
URL: GET http://localhost:3000/api/stats
Headers:
- Content-Type: application/json
- Authorization: Bearer <token>

测试用例 6.1: 正常获取
Headers:
Authorization: Bearer eyJhbGciOiJIUzI1NiIs...
预期响应 (200):
{
    "totalTasks": 125,
    "todayTasks": 8,
    "completedTasks": 98
}

测试用例 6.2: 未授权访问
Headers: 无 Authorization
预期响应 (401):
{
    "message": "请先登录"
}

7. 获取最新任务接口
----------------
URL: GET http://localhost:3000/api/tasks/latest
Headers:
- Content-Type: application/json
- Authorization: Bearer <token>

测试用例 7.1: 正常获取
Headers:
Authorization: Bearer eyJhbGciOiJIUzI1NiIs...
预期响应 (200):
{
    "id": 42,
    "content": "发送促销信息",
    "numbers": ["13800138000", "13900139000"],
    "status": "待处理",
    "created_at": "2024-03-14T10:30:00Z",
    "media_type": "image",
    "media_urls": ["https://task-save.oss-cn-beijing.aliyuncs.com/uploads/promo.jpg"]
}

测试用例 7.2: 无任务数据
Headers:
Authorization: Bearer eyJhbGciOiJIUzI1NiIs...
预期响应 (404):
{
    "message": "未找到任务"
}

测试用例 7.3: 未授权访问
Headers: 无 Authorization
预期响应 (401):
{
    "message": "请先登录"
}

8. 获取所有待处理任务接口
----------------
URL: GET http://localhost:3000/api/tasks/pending
Headers: 
- Content-Type: application/json
- X-API-KEY: {ADMIN_API_KEY}
- X-TIMESTAMP: {当前时间戳}
- X-SIGNATURE: {签名}

安全认证：
- 需要提供有效的 API Key
- 时间戳必须在1分钟内有效
- 签名必须正确（使用 SHA-256 算法）

签名生成方式：
```javascript
const signature = crypto
  .createHash('sha256')
  .update(`${timestamp}:${ADMIN_API_KEY}`)
  .digest('hex');
```

测试用例 8.1: 正常获取
Headers:
- X-API-KEY: {从.env获取的ADMIN_API_KEY}
- X-TIMESTAMP: {Date.now()}
- X-SIGNATURE: {计算的签名}
预期响应 (200):
{
  "message": "获取成功",
  "total": 2,
  "tasks": [
    {
      "id": 1,
      "content": "测试任务内容",
      "numbers": ["13812345678"],
      "media_urls": ["https://..."],
      "media_type": "image",
      "created_at": "2024-03-20T10:00:00.000Z",
      "updated_at": "2024-03-20T10:00:00.000Z",
      "user": {
        "username": "testuser",
        "nickname": "测试用户"
      }
    }
  ]
}

测试用例 8.2: 缺少认证信息
Headers: 无认证头信息
预期响应 (401):
{
  "message": "缺少认证信息"
}

测试用例 8.3: API Key 无效
Headers:
- X-API-KEY: 错误的key
- X-TIMESTAMP: {Date.now()}
- X-SIGNATURE: 错误的签名
预期响应 (401):
{
  "message": "签名无效"
}

测试用例 8.4: 时间戳过期
Headers:
- X-API-KEY: {有效的ADMIN_API_KEY}
- X-TIMESTAMP: {一分钟前的时间戳}
- X-SIGNATURE: {有效签名}
预期响应 (401):
{
  "message": "请求已过期"
}

注意事项：
1. 此接口仅供管理员使用
2. 每个IP 15分钟内最多请求100次
3. 时间戳必须是毫秒级的
4. 签名算法必须严格按照规定方式生成

注意事项：
1. 所有接口的错误响应都包含 message 字段
2. 需要认证的接口必须在 Headers 中包含有效的 Authorization token
3. token 格式必须是 "Bearer " 开头（注意空格）
4. 电话号码支持任意格式的国际电话号码
5. 所有时间戳采用 ISO 格式
6. 文件上传限制：
   - 图片：最大 1MB
   - 视频：最大 5MB
   - 每个任务仅支持一个文件
   - 仅支持图片和视频格式
7. media_type 可能的值：
   - "image": 仅包含图片
   - "video": 仅包含视频
   - null: 没有上传文件